import path from "path";
import fs from "fs";
import matter from "gray-matter";
import remark from "remark";
import html from "remark-html";


const postsDirectory = path.join(process.cwd(), "posts")

// mdファイルデータを取り出す。
export function getPostsData() {
	const func = 'getPostsData';
	// // SSRの場合
	// const allPostsData = await fetch("endpoint");    // 外部API経由でデータを取得する、など。

	// SSGの場合
	const fileNames = fs.readdirSync(postsDirectory);
	console.log(func, ' fileNames ', fileNames);

	const allPostsData = fileNames.map((fileName) => {
		const func = 'fileNames.map';
		console.log(func, ' fileName ', fileName);

		// ファイル名から拡張子を外して、idとする
		const id = fileName.replace(/\.md$/, "");
		console.log(func, ' id ', id);

		// マークダウンファイルを文字列として読み取る
		const fullPath = path.join(postsDirectory, fileName);
		console.log(func, ' fullPath ', fullPath);

		// パスがファイルかどうか (or フォルダ) を確認
		const stat = fs.statSync(fullPath);
		console.log(func, ' stat ', stat);
		if (stat.isFile()) {
			const fileContents = fs.readFileSync(fullPath, "utf8");
//            console.log(func, ' fileContents ', fileContents);
			const matterResult = matter(fileContents);
			console.log(func, ' matterResult ', matterResult);

			// idとデータを返す
			return {
				id,
				...matterResult.data,
			};
		}
		else {
			console.warn(func, `Skipping directory: ${fullPath}`);
			return null;
		}
	}).filter(post => post !== null);   // nullを除外してクリーンな配列を返す

	return allPostsData;
}

// getStaticPathで使うpathを取得する
export function getAllPostIds() {
	const func = 'getAllPostIds';

	const fileName2s = fs.readdirSync(postsDirectory);
	console.log(func, ' fileName2s ', fileName2s);

	return fileName2s.map((fileName2) => {
		const func = 'fileName2s.map';
		console.log(func, ' fileName2 ', fileName2);

		return {
			params: {
				id: fileName2.replace(/\.md$/, ""),      // ファイル名から拡張子を外して、idとする
			}
		}
	});
	/*
	[
			{
					params: {
							id: "ssg-ssr"
					},
					params: {
							id: "xxx"
					},
			}
	]
	*/
}

// idに基づいてブログ投稿データを返す。
export async function getPostData() {
	const func = 'getPostData';

	const fullPath = path.join(postsDirectory, `${id}.md`);
	console.log(func, ' fullPath ', fullPath);

	// パスがファイルかどうか (or フォルダ) を確認
	const stat = fs.statSync(fullPath);
	console.log(func, ' stat ', stat);
	if (stat.isFile()) {
		const fileContents = fs.readFileSync(fullPath, "utf8");
//        console.log(func, ' fileContents ', fileContents);
		const matterResult = matter(fileContents);
		console.log(func, ' matterResult ', matterResult);

		const blogContent = await remark()
		.use(html)
		.process(matterResult.content);

		const blogContentHTML = blogContent.toString();

		// idとデータを返す
		return {
			id,
			blogContentHTML,
			...matterResult.data,
		};
	}
	else {
		console.warn(func, `Skipping directory: ${fullPath}`);
		return null;
	}
}
